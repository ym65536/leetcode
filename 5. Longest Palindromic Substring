string longestPalindrome(string s) {
    string result;
    for (int i = 0; i < s.size(); ++ i) {
       int left = i, right = i;
       while (left >= 0 && s[left] == s[i]) {
           -- left;
       }
       while (right < s.size() && s[right] == s[i]) {
           ++ right;
       }
       while (left >= 0 && right < s.size() && s[left] == s[right]) {
           -- left;
           ++ right;
       }
       if (right - left - 1 > result.size()) {
           result = s.substr(left + 1, right - left - 1);
       }
    }
    return result;
}

public String longestPalindrome(String s) {
    int n = s.length();
    boolean[][] store = new boolean[n][n];
    String result = "";
    for (int i = n - 1; i >= 0; -- i) {
        for (int j = i; j < n; ++ j) {
            if (s.charAt(i) != s.charAt(j)) {
                continue;
            }
            if (j - i <= 1) {
                store[i][j] = true;
            } else {
                store[i][j] = store[i+1][j-1];
            }
            if (store[i][j] && result.length() < (j - i + 1)) {
                result = s.substring(i, j + 1);
            }
        }
    }
    return result;
}
