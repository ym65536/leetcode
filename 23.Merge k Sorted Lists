ListNode* mergeKLists(vector<ListNode*>& lists) {
    if (lists.empty()) {
        return nullptr;
    }
    return MergeSort(lists, 0, lists.size() - 1);
}

ListNode* MergeSort(vector<ListNode*>& lists, int left, int right) {
    if (left >= right) {
        return lists[left];
    }
    auto mid = (left + right) / 2;
    auto l1 = MergeSort(lists, left, mid);
    auto l2 = MergeSort(lists, mid + 1, right);
    return mergeTwoLists(l1, l2);
}

ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
    ListNode dummy(INT_MIN);
    ListNode* pl = &dummy;
    while (l1 && l2) {
        if (l1->val < l2->val) {
            pl->next = l1;
            l1 = l1->next;
        } else {
            pl->next = l2;
            l2 = l2->next;
        }
        pl = pl->next;
        pl->next = nullptr;
    }
    if (l1) {
        pl->next = l1;
    }
    if (l2) {
        pl->next = l2;
    }
    return dummy.next;
}
