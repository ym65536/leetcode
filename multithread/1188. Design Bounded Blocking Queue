/*
实现一个拥有如下方法的线程安全有限阻塞队列：

BoundedBlockingQueue(int capacity) 构造方法初始化队列，其中capacity代表队列长度上限。
void enqueue(int element) 在队首增加一个element. 如果队列满，调用线程被阻塞直到队列非满。
int dequeue() 返回队尾元素并从队列中将其删除. 如果队列为空，调用线程被阻塞直到队列非空。
int size() 返回当前队列元素个数。
你的实现将会被多线程同时访问进行测试。每一个线程要么是一个只调用enqueue方法的生产者线程，要么是一个只调用dequeue方法的消费者线程。size方法将会在每一个测试用例之后进行调用。

请不要使用内置的有限阻塞队列实现，否则面试将不会通过。

 

示例 1:

输入:
1
1
["BoundedBlockingQueue","enqueue","dequeue","dequeue","enqueue","enqueue","enqueue","enqueue","dequeue"]
[[2],[1],[],[],[0],[2],[3],[4],[]]

输出:
[1,0,2,2]

解释:
生产者线程数目 = 1
消费者线程数目 = 1

BoundedBlockingQueue queue = new BoundedBlockingQueue(2); // 使用capacity = 2初始化队列。

queue.enqueue(1); // 生产者线程将1插入队列。
queue.dequeue(); // 消费者线程调用dequeue并返回1。
queue.dequeue(); // 由于队列为空，消费者线程被阻塞。
queue.enqueue(0); // 生产者线程将0插入队列。消费者线程被解除阻塞同时将0弹出队列并返回。
queue.enqueue(2); // 生产者线程将2插入队列。
queue.enqueue(3); // 生产者线程将3插入队列。
queue.enqueue(4); // 生产者线程由于队列长度已达到上限2而被阻塞。
queue.dequeue(); // 消费者线程将2从队列弹出并返回。生产者线程解除阻塞同时将4插入队列。
queue.size(); // 队列中还有2个元素。size()方法在每组测试用例最后调用。
 

示例 2:

输入:
3
4
["BoundedBlockingQueue","enqueue","enqueue","enqueue","dequeue","dequeue","dequeue","enqueue"]
[[3],[1],[0],[2],[],[],[],[3]]

输出:
[1,0,2,1]

解释:
生产者线程数目 = 3
消费者线程数目 = 4

BoundedBlockingQueue queue = new BoundedBlockingQueue(3); // 使用capacity = 3初始化队列。

queue.enqueue(1); // 生产者线程P1将1插入队列。
queue.enqueue(0); // 生产者线程P2将0插入队列。
queue.enqueue(2); // 生产者线程P3将2插入队列。
queue.dequeue(); // 消费者线程C1调用dequeue。
queue.dequeue(); // 消费者线程C2调用dequeue。
queue.dequeue(); // 消费者线程C3调用dequeue。
queue.enqueue(3); // 其中一个生产者线程将3插入队列。
queue.size(); // 队列中还有1个元素。

由于生产者/消费者线程的数目可能大于1，我们并不知道线程如何被操作系统调度，即使输入看上去隐含了顺序。因此任意一种输出[1,0,2]或[1,2,0]或[0,1,2]或[0,2,1]或[2,0,1]或[2,1,0]都可被接受。
*/
template <typename T>
class BoundedBlockingQueue {
public:
    explicit BoundedBlockingQueue(int maxSize) : ringbuffer(maxSize) {

    }

    void put(const T& x) {
        std::unique_lock<std::mutex> lock(mutex_);
        notFull_.wait(lock, [&] { return !ringbuffer.full(); });
        ringbuffer.push_back(x);
        if (ringbuffer.size() == 1)
            notEmpty_.notify_one();
    }

    T take() {
        std::unique_lock<std::mutex> lock(mutex_);
        notEmpty_.wait(lock, [&] { return !ringbuffer.empty(); });
        assert(!ringbuffer.empty());
        T front(ringbuffer.front());
        ringbuffer.pop_front();
        notFull_.notify_one();
        return front;
    }

    bool empty() const {
        std::lock_guard<std::mutex> lock(mutex_);
        return ringbuffer.empty();
    }

    bool full() const {
        std::lock_guard<std::mutex> lock(mutex_);
        return ringbuffer.full();
    }

    size_t size() const {
        std::lock_guard<std::mutex> lock(mutex_);
        return ringbuffer.size();
    }

    size_t capacity() const {
        std::lock_guard<std::mutex> lock(mutex_);
        return ringbuffer.capacity();
    }

private:
    mutable std::mutex  mutex_;
    std::condition_variable notEmpty_;
    std::condition_variable notFull_;
    boost::circular_buffer<T> ringbuffer;
};

/××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××/

#include <iostream>
#include <deque>
#include <mutex>
#include <condition_variable>
#include <functional>
#include <thread>
#include <chrono>
#include <cstdlib>
#include <ctime>

template<typename T>
class Buffer
{
private:
    static const int SIZE = 10;
    std::deque<T> content;
    std::mutex mtx;
    std::condition_variable con_var;
public:
    Buffer() = default;
    void add(const T &item) {
        std::unique_lock<std::mutex> lck(mtx);
        con_var.wait(lck, [this](){return content.size() < SIZE;});
        content.push_back(item);
        con_var.notify_all();
    }

    T remove() {
        std::unique_lock<std::mutex> lck(mtx);
        con_var.wait(lck, [this](){return content.size() > 0;});
        T item = content.front();
        content.pop_front();
        con_var.notify_all();
        return item;
    }
};

template <typename T>
class Producer
{
private:
    Buffer<T> &buffer;
public:
    Producer(Buffer<T> &b) : buffer(b) {}
    void run(std::function<T()> produce) {
        while(true) {
            T item = produce();
            buffer.add(item);
            std::cout << "Produced " << item << std::endl;
        }
    }
};

template <typename T>
class Consumer
{
private:
    Buffer<T> &buffer;
public:
    Consumer(Buffer<T> &b) : buffer(b) {}
    void run(std::function<void(T &)> consume) {
        while(true) {
            T item = buffer.remove();
            consume(item);
            std::cout << "Consumed " << item << std::endl;
        }
    }
};

int main()
{
    Buffer<int> buffer;
    Producer<int> producer(buffer);
    Consumer<int> consumer(buffer);

    std::srand(std::time(nullptr));

    std::thread producer_thread(&Producer<int>::run, &producer, [](){
        std::this_thread::sleep_for(std::chrono::seconds(1 + std::rand() % 3));
        int item = std::rand() % 100;
        return item;
    });

    std::thread consumer_thread(&Consumer<int>::run, &consumer, [](int &x){
        std::this_thread::sleep_for(std::chrono::seconds(1 + std::rand() % 3));
    });

    producer_thread.join();
    consumer_thread.join();
}
