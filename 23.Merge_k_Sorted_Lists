ListNode* mergeKLists(vector<ListNode*>& lists) 
{
    return mergeList(lists, 0, lists.size() - 1);    
}

ListNode* mergeList(vector<ListNode*>& lists, int l, int r)
{
    int mid = (l + r) / 2;
    if (l > r)
        return NULL;
    if (l == r)
        return lists[l];

    ListNode* left = mergeList(lists, l, mid);
    ListNode* right = mergeList(lists, mid + 1, r);

    return merge(left, right);
}

ListNode* merge(ListNode* pl, ListNode* pr)
{
    ListNode dummy(INT_MIN);
    ListNode* visit = &dummy;

    while (pl != NULL && pr != NULL)
    {
        if (pl->val < pr->val)
        {
            visit->next = pl;
            pl = pl->next;
        }
        else
        {
            visit->next = pr;
            pr = pr->next;
        }
        visit = visit->next;
        visit->next = NULL;
    }
    visit->next = (pl != NULL) ? pl : pr;

    return dummy.next;
}
