vector<vector<int>> kClosest(vector<vector<int>>& points, int K) {
    auto comparator = [](const vector<int>& a, const vector<int>& b) {
            return sqrt(a[0] * a[0] + a[1] * a[1]) < sqrt(b[0] * b[0] + b[1] * b[1]);
        };
    priority_queue<vector<int>, vector<vector<int>>, decltype(comparator)> store{comparator};
    for (const auto& point : points) {
        store.push(point);
        if (store.size() > K) {
            store.pop();
        }
    }
    vector<vector<int>> result;
    while (!store.empty()) {
        result.emplace_back(std::move(store.top()));
        store.pop();
    }
    return result;
}
