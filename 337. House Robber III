int rob(TreeNode* root) {
    auto result = recurse(root); // firstï¼š rob current  second: not rob current
    return max(result.first, result.second);
}
pair<int, int> recurse(TreeNode* root) {
    if (root == nullptr) {
        return {0, 0};
    }
    auto left = recurse(root->left);
    auto right = recurse(root->right);
    pair<int, int> store;
    store.first = root->val + left.second + right.second;
    store.second = max(left.first, left.second) + max(right.first, right.second);
    return store;
}

class Solution {
    public int rob(TreeNode root) {
        Pair result = backtrace(root);
        return Math.max(result.first, result.second);
    }
    
    Pair backtrace(TreeNode root) {
        Pair kv = new Pair();
        if(root == null) {
            return kv;
        }
        Pair left = backtrace(root.left);
        Pair right = backtrace(root.right);
        kv.first = root.val + left.second + right.second;
        kv.second = Math.max(left.first, left.second) + Math.max(right.first, right.second);
        return kv;
    }
    public class Pair {
        public int first = 0;
        public int second = 0;
    };
}
