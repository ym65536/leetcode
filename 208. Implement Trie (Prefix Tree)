struct TrieNode {
    shared_ptr<TrieNode> child[26] = {nullptr};
    bool last = false;
};

class Trie {
public:
    /** Initialize your data structure here. */
    Trie() {
        root = make_shared<TrieNode>();
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        shared_ptr<TrieNode> tnode = root; 
        for (auto ch : word) {
            int index = ch - 'a';
            if (tnode->child[index] == nullptr) {
                tnode->child[index] = make_shared<TrieNode>();
            }
            tnode = tnode->child[index];
        }
        tnode->last = true;
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        shared_ptr<TrieNode> tnode = root; 
        for (auto ch : word) {
            int index = ch - 'a';
            if (tnode->child[index] == nullptr) {
                return false;
            }
            tnode = tnode->child[index];
        } 
        return tnode->last;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
       shared_ptr<TrieNode> tnode = root; 
        for (auto ch : prefix) {
            int index = ch - 'a';
            if (tnode->child[index] == nullptr) {
                return false;
            }
            tnode = tnode->child[index];
        } 
        return true; 
    }
    
private:
    shared_ptr<TrieNode> root;
};
