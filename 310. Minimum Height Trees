vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {
	if (n == 1) {
		return {0};
	}
	vector<int> result;
	vector<vector<int>> graph(n, vector<int>());
	vector<int> degree(n, 0);
	deque<int> leafs;
	for (const auto& item: edges) {
		graph[item[0]].push_back(item[1]);
		graph[item[1]].push_back(item[0]);
		++ degree[item[0]];
		++ degree[item[1]];
	}
	for (int node = 0; node < n; ++ node) {
		if (degree[node] == 1) {
			leafs.push_back(node);
		}
	}

	int left = n;
	while (left > 2) {
		int leaf_size = leafs.size();
		for (int i = 0; i < leaf_size; ++ i) {
			int node = leafs.front();
			leafs.pop_front();
			-- left;
			for (auto peer_node : graph[node]) {
				-- degree[peer_node];
				if (degree[peer_node] == 1) {
					leafs.push_back(peer_node);
				}
			}
		}
	}
	result.insert(result.begin(), leafs.begin(), leafs.end());
	return result;
}
