vector<string> removeInvalidParentheses(string s) {
    vector<string> result;
    queue<string> store;
    set<string> visited;
    store.push(s);
    visited.insert(s);
    bool found = false;
    while (!store.empty()) {
        auto str = store.front();
        store.pop();
        if (valid(str)) {
            result.push_back(str);
            found = true;
        }
        if (found) {
            continue;
        }
        for (int i = 0; i < str.size(); ++ i) {
            if (str[i] != '(' && str[i] != ')') {
                continue;
            }
            auto tmp = str.substr(0, i) + str.substr(i + 1);
            if (!visited.count(tmp)) {
                visited.insert(tmp);
                store.push(tmp);
            }
        }
    }
    return result;
}

bool valid(const string& str) {
    int store = 0;
    for (const auto c : str) {
        if (c == '(') {
            ++ store;
        } else if (c == ')') {
            -- store;
            if (store < 0) {
                return false;
            }
        }
    }
    return store == 0;
}


class Solution {
    public List<String> removeInvalidParentheses(String s) {
        Set<String> visited = new HashSet<String>();
        visited.add(s);
        Queue<String> store = new LinkedList<String>();
        store.offer(s);
        List<String> result = new ArrayList<String>();
        boolean find = false;
        while (!store.isEmpty()) {
            String ts = store.poll();
            if (isValid(ts)) {
                result.add(ts);
                find = true;
            }
            if (find == true) {
                continue;
            }
            for (int i = 0; i < ts.length(); ++ i) {
                char c = ts.charAt(i);
                if (c != '(' && c != ')') {
                    continue;
                }
                String ns = ts.substring(0, i) + ts.substring(i + 1);
                if (!visited.contains(ns)) {
                    visited.add(ns);
                    store.offer(ns);
                }
            }
        }
        return result;
    }
    
    public boolean isValid(String s) {
        int count = 0;
        for (int i = 0; i < s.length(); ++ i) {
            char c = s.charAt(i);
            if (c == '(') {
                ++ count;
            } else if (c == ')') {
                -- count;
                if (count < 0) {
                    return false;
                }
            }
        }
        return count == 0;
    }
}
