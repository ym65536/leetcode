vector<string> removeInvalidParentheses(string s) {
    vector<string> result;
    queue<string> store;
    set<string> visited;
    store.push(s);
    visited.insert(s);
    bool found = false;
    while (!store.empty()) {
        auto str = store.front();
        store.pop();
        if (valid(str)) {
            result.push_back(str);
            found = true;
        }
        if (found) {
            continue;
        }
        for (int i = 0; i < str.size(); ++ i) {
            if (str[i] != '(' && str[i] != ')') {
                continue;
            }
            auto tmp = str.substr(0, i) + str.substr(i + 1);
            if (!visited.count(tmp)) {
                visited.insert(tmp);
                store.push(tmp);
            }
        }
    }
    return result;
}

bool valid(const string& str) {
    int store = 0;
    for (const auto c : str) {
        if (c == '(') {
            ++ store;
        } else if (c == ')') {
            -- store;
            if (store < 0) {
                return false;
            }
        }
    }
    return store == 0;
}
