class Solution {
public:
    string validIPAddress(string IP) {
        vector<string> output;
        if (IP.find(':') == string::npos) {
            if (count(IP.begin(), IP.end(), '.') != 3) {
                return "Neither";
            }
            split(IP, '.', output);
            if (output.size() == 4) {
                for (const auto& item : output) {
                    if (item.empty() || item.size() > 3 || (item.size() > 1 && item[0] == '0')) {
                        return "Neither";
                    }
                    for (auto c : item) {
                        if (!isdigit(c)) {
                            return "Neither";
                        }
                    }
                    int k = atoi(item.c_str());
                    if (k < 0 || k > 255) {
                        return "Neither";
                    }
                }
                return "IPv4";
            }
        } else {
            if (count(IP.begin(), IP.end(), ':') != 7) {
                return "Neither";
            }
            split(IP, ':', output);
            if (output.size() == 8) {
                for (const auto& item : output) {
                    if (item.size() == 0 || item.size() > 4) {
                        return "Neither";
                    }
                    for (auto c : item) {
                        if (!isxdigit(c)) {
                            return "Neither";
                        }
                    }
                }
                return "IPv6";
            }
        }
        return "Neither";
    }
    
    void split(const string& str, char delim, vector<string>& output) {
        stringstream ss;
        ss << str;
        string item;
        while (getline(ss, item, delim)) {
            output.emplace_back(item);
        }
    }
