ListNode* oddEvenList(ListNode* head) {
    ListNode odd(-1);
    ListNode even(-1);
    odd.next = head;
    ListNode* prev = &odd;
    ListNode* iter = head;
    ListNode* pe = &even;
    int pos = 1;
    while (iter) {
        if (pos % 2 == 1) {
            prev = iter;
            iter = iter->next;
        } else {
            prev->next = iter->next;
            pe->next = iter;
            pe = pe->next;
            pe->next = nullptr;
            iter = prev->next;
        }
        ++ pos;
    }
    prev->next = even.next;
    return odd.next;
}

class Solution {
    public ListNode oddEvenList(ListNode head) {
        ListNode oh = new ListNode(-1);
        ListNode eh = new ListNode(-1);
        oh.next = head;
        ListNode iter = oh;
        ListNode ep = eh; 
        int count = 0;
        while (iter.next != null) {
            ++ count;
            if (count % 2 == 1) {
                iter = iter.next;
            } else {
                ep.next = iter.next;
                iter.next = iter.next.next;
                ep = ep.next;
            }
        }
        ep.next = null;
        iter.next = eh.next;
        return oh.next;
    }
}
