vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
    vector<int> result;
    vector<vector<int>> graph(numCourses, vector<int>());
    vector<int> indegree(numCourses, 0);
    queue<int> store;
    for (const auto& item : prerequisites) {
        auto prev = item[1];
        auto curr = item[0];
        graph[prev].push_back(curr);
        ++ indegree[curr];
    }
    for (int node = 0; node < indegree.size(); ++ node) {
        if (indegree[node] == 0) {
            store.push(node);
        }
    }
    while (!store.empty()) {
        auto node = store.front();
        store.pop();
        result.push_back(node);
        for (const auto item : graph[node]) {
            -- indegree[item];
            if (indegree[item] == 0) {
                store.push(item);
            }
        }
    }
    return result.size() == numCourses ? result : vector<int>();
}
