ListNode* sortList(ListNode* head) {
    if (!head || !head->next) {
        return head;
    }
    ListNode* fast = head;
    ListNode* slow = head;
    ListNode* prev = nullptr;
    while (fast && fast->next) {
        prev = slow;
        slow = slow->next;
        fast = fast->next->next;
    }
    prev->next = nullptr;
    return mergeList(sortList(head), sortList(slow));
}

ListNode* mergeList(ListNode* l1, ListNode* l2) {
    ListNode dummy(INT_MIN);
    ListNode* l = &dummy;
    while (l1 && l2) {
        if (l1->val < l2->val) {
            l->next = l1;
            l1 = l1->next;
        } else {
            l->next = l2;
            l2 = l2->next;
        }
        l = l->next;
    }
    l->next = l1 ? l1 : l2;
    return dummy.next;
}
