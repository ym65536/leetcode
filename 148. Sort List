ListNode* sortList(ListNode* head) {
    if (!head || !head->next) {
        return head;
    }
    ListNode* pre = head;
    ListNode* slow = head;
    ListNode* fast = head;
    while (fast && fast->next) {
        pre = slow;
        slow = slow->next;
        fast = fast->next->next;
    }
    pre->next = nullptr;     
    return mergeList(sortList(head), sortList(slow));
}

ListNode* mergeList(ListNode* l1, ListNode* l2) {
    ListNode dummy(-1);
    ListNode* pnode = &dummy;
    while (l1 && l2) {
        if (l1->val < l2->val) {
            pnode->next = l1;
            l1 = l1->next;
        } else {
            pnode->next = l2;
            l2 = l2->next;
        }
        pnode = pnode->next;
    }
    if (l1) {
        pnode->next = l1;
    }
    if (l2) {
        pnode->next = l2;
    }

    return dummy.next;
}
