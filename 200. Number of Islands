int numIslands(vector<vector<char>>& grid) {
    int result = 0;
    if (grid.empty()) {
        return 0;
    }
    vector<vector<int>> marked(grid.size(), vector<int>(grid[0].size(), 0));
    for (int i = 0; i < grid.size(); ++ i) {
        for (int j = 0; j < grid[0].size(); ++ j) {
            if (grid[i][j] == '1' && !marked[i][j]) {
                ++ result;
                bfs(grid, marked, i, j);
            }
        }
    }
    return result;
}

void bfs(const vector<vector<char>>& grid, vector<vector<int>>& marked, int i, int j) {
    if (i < 0 || i >= grid.size() || j < 0 || j >= grid[0].size() ||
       marked[i][j] || grid[i][j] == '0') {
        return;
    }
    marked[i][j] = 1;
    bfs(grid, marked, i + 1, j);
    bfs(grid, marked, i - 1, j);
    bfs(grid, marked, i, j + 1);
    bfs(grid, marked, i, j - 1);
}
