int numIslands(vector<vector<char>>& grid) {
    int islandSize = 0;
    if (grid.empty() || grid[0].empty()) {
        return islandSize;
    }
    vector<vector<bool>> marked(grid.size(), vector<bool>(grid[0].size(), false));
    vector<vector<int>> dirs{{0, -1}, {-1, 0}, {0, 1}, {1, 0}};
    for (int i = 0; i < grid.size(); ++ i) {
        for (int j = 0; j < grid[0].size(); ++ j) {
            if (grid[i][j] == '0' || marked[i][j]) {
                continue;
            }
            ++ islandSize;
            queue<pair<int, int>> store;
            store.push(make_pair(i, j));
            while (!store.empty()) {
                auto pos = store.front();
                store.pop();
                for (int k = 0; k < dirs.size(); ++ k) {
                    int ni = pos.first + dirs[k][0];
                    int nj = pos.second + dirs[k][1];
                    if (ni >= grid.size() || nj >= grid[0].size() || ni < 0 || nj < 0 
                        || marked[ni][nj] || grid[ni][nj] == '0') {
                        continue;
                    }
                    marked[ni][nj] = true;
                    store.push(make_pair(ni, nj));
                }
            }
        }
    }

    return islandSize;
}

/*
int numIslands(vector<vector<char>>& grid) {
    int islandSize = 0;
    if (grid.empty() || grid[0].empty()) {
        return islandSize;
    }
    vector<vector<bool>> marked(grid.size(), vector<bool>(grid[0].size(), false));
    for (int i = 0; i < grid.size(); ++ i) {
        for (int j = 0; j < grid[0].size(); ++ j) {
            if (grid[i][j] == '1' && marked[i][j] == false) {
                ++ islandSize;
                backtrace(grid, marked, i, j);
            }
        }
    }
    return islandSize;
}
void backtrace(const vector<vector<char>>& grid, vector<vector<bool>>& marked, int i, int j) {
    if (i >= grid.size() || j >= grid[0].size() || i < 0 || j < 0 
        || marked[i][j] || grid[i][j] == '0') {
        return;
    }
    marked[i][j] = true;
    backtrace(grid, marked, i + 1, j);
    backtrace(grid, marked, i - 1, j);
    backtrace(grid, marked, i, j + 1);
    backtrace(grid, marked, i, j - 1);
}*/
