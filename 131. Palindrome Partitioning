vector<vector<string>> partition(string s) {
    vector<vector<string>> result;
    vector<string> solution;
    dfs(result, solution, s, 0);
    return result;
}

void dfs(vector<vector<string>>& result, vector<string>& solution, const string& s, int index) {
    if (index >= s.size()) {
        result.push_back(solution);
        return;
    }

    for (int i = index; i < s.size(); i++) {
        string sub = s.substr(index, i + 1 - index);
        if (isPalindrome(sub)) {
            solution.push_back(sub);
            dfs(result, solution, s, i + 1);
            solution.pop_back();
        }
    }
}

bool isPalindrome(const string& s) {
    for (int i = 0, j = s.size() - 1; i < j; ++i, --j) {
        if (s[i] != s[j]) {
            return false;
        }
    }
    return true;
}
