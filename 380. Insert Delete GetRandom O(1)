class RandomizedSet {
public:
    /** Initialize your data structure here. */
    RandomizedSet() {
        
    }
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    bool insert(int val) {
        if (map_.find(val) != map_.end()) {
            return false;
        }
        map_[val] = values_.size();
        values_.push_back(val);
        return true;
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    bool remove(int val) {
        if (map_.find(val) == map_.end()) {
            return false;
        }
        int back_value = values_.back();
        values_[map_[val]] = back_value;
        values_.pop_back();
        map_[back_value] = map_[val];
        map_.erase(val);
        return true;
    }
    
    /** Get a random element from the set. */
    int getRandom() {
        return values_[random() % values_.size()];
    }
    
private:
    unordered_map<int, int> map_;
    vector<int> values_;
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet obj = new RandomizedSet();
 * bool param_1 = obj.insert(val);
 * bool param_2 = obj.remove(val);
 * int param_3 = obj.getRandom();
 */
