bool canFinish(int numCourses, vector<pair<int, int>>& prerequisites) {
    vector<vector<int>> graph(numCourses, vector<int>());
    queue<int> nodes;
    vector<int> indegrees(numCourses, 0);
    int visit_node_size = 0;

    for (auto item : prerequisites) {
        graph[item.first].push_back(item.second);
        ++ indegrees[item.second];
    }
    for (int node_id = 0; node_id < indegrees.size(); ++ node_id) {
        if (indegrees[node_id] == 0) {
            nodes.push(node_id);
        }
    }
    while (!nodes.empty()) {
        ++ visit_node_size;
        int node_id = nodes.front();
        nodes.pop();
        for (auto neighber_id : graph[node_id]) {
            -- indegrees[neighber_id];
            if (indegrees[neighber_id] == 0) {
                nodes.push(neighber_id);
            }
        }
    }

    return visit_node_size == numCourses;
    }
