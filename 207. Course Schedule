bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        vector<int> result;
        // first, construct the graph
        vector<int> indegree(numCourses, 0);
        vector<vector<int>> graph(numCourses, vector<int>());
        for (const auto& item : prerequisites) {
            auto node = item[0];
            auto peer = item[1];
            ++ indegree[peer];
            graph[node].push_back(peer);
        }       
        // find all start node
        queue<int> prenodes;
        for (int node = 0; node < numCourses; ++ node) {
            if (indegree[node] == 0) {
                prenodes.push(node);
            }
        }
        // start algorithm
        while (!prenodes.empty()) {
            auto node = prenodes.front();
            prenodes.pop();
            result.push_back(node);
            for (auto peer : graph[node]) {
                -- indegree[peer];
                if (indegree[peer] == 0) {
                    prenodes.push(peer);
                }
            }
        }
        return result.size() == numCourses;
    }
