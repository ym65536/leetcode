/*
    对于一个长度为n的已排序数列a，若n为奇数，中位数为a[n / 2 + 1] , 
    若n为偶数，则中位数(a[n / 2] + a[n / 2 + 1]) / 2
    如果我们可以在两个数列中求出第K小的元素，便可以解决该问题
    不妨设数列A元素个数为n，数列B元素个数为m，各自升序排序，求第k小元素
    取A[k / 2] B[k / 2] 比较，
    如果 A[k / 2] > B[k / 2] 那么，所求的元素必然不在B的前k / 2个元素中(证明反证法)
    反之，必然不在A的前k / 2个元素中，于是我们可以将A或B数列的前k / 2元素删去，求剩下两个数列的
    k - k / 2小元素，于是得到了数据规模变小的同类问题，递归解决
    如果 k / 2 大于某数列个数，所求元素必然不在另一数列的前k / 2个元素中，同上操作就好。
    */

double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
    int total = nums1.size() + nums2.size();

    if (total & 0x1) {
        return findKth(nums1, nums2, 0, 0, total / 2 + 1);
    } else {
        return findKth(nums1, nums2, 0, 0, total / 2) * 0.5 + 
             findKth(nums1, nums2, 0, 0, total / 2 + 1) * 0.5;
    }
}

double findKth(vector<int>& A, vector<int>& B, int Ast, int Bst, int k) {
    if (Ast >= A.size())
        return B[Bst + k - 1];
    if (Bst >= B.size())
        return A[Ast + k - 1];
    if (k == 1) 
        return min(A[Ast], B[Bst]);

    int keyA = INT_MAX;
    int keyB = INT_MAX;
    if (Ast + k/2 - 1 < A.size()) keyA = A[Ast + k/2 - 1];
    if (Bst + k/2 - 1 < B.size()) keyB = B[Bst + k/2 - 1];
    if (keyA < keyB)
        return findKth(A, B, Ast + k/2, Bst, k - k/2);
    else
        return findKth(A, B, Ast, Bst + k/2, k - k/2);
}
