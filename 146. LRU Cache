class LRUCache {
public:
    LRUCache(int capacity): cap_(capacity) {
    }
    
    int get(int key) {
        auto it = kvmap_.find(key);
        if (it == kvmap_.end()) {
            return -1;
        }
        auto& kv_iter = it->second;
        kvlist_.splice(kvlist_.begin(), kvlist_, kv_iter);
        it->second = kvlist_.begin();
        return kv_iter->second;
    }
    
    void put(int key, int value) {
        auto it = kvmap_.find(key);
        if (it != kvmap_.end()) {
            auto& kv_iter = it->second;
            kvlist_.splice(kvlist_.begin(), kvlist_, kv_iter);
            it->second = kvlist_.begin();
            kv_iter->second = value;
        } else {
            if (kvmap_.size() >= cap_) {
                auto& invalid = kvlist_.back();
                auto key = invalid.first;
                kvlist_.pop_back();
                kvmap_.erase(key);
            }
            kvlist_.push_front(make_pair(key, value));
            kvmap_.insert(make_pair(key, kvlist_.begin()));
        }
    }
      
private:
    typedef list<pair<int, int>> KVList;
    int cap_;
    KVList kvlist_;
    map<int, KVList::iterator> kvmap_;
};
