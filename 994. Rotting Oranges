int orangesRotting(vector<vector<int>>& grid) {
    if (grid.empty()) {
        return 0;
    }
    int fresh = 0; // number of fresh oranges
    queue<pair<int, int>> store; // rotten orange position
    int m = grid.size();
    int n = grid[0].size();
    for (int i = 0; i < m; ++ i) {
        for (int j = 0; j < n; ++ j) {
            if (grid[i][j] == 1) {
                ++ fresh;
            }
            if (grid[i][j] == 2) {
                store.push(make_pair(i, j));
            }
        }
    }
    int dir[4][2] = {{0, 1}, {0, -1}, {-1, 0}, {1, 0}};
    int minutes = -1;
    while (!store.empty()) {
        int rotten_size = store.size();
        ++ minutes;
        for (int rot = 0; rot < rotten_size; ++ rot) {
            auto pos = store.front();
            store.pop();
            for (int i = 0; i < 4; ++ i) {
                int nx = pos.first + dir[i][0];
                int ny = pos.second + dir[i][1];
                if (nx < 0 || nx >= m || ny < 0 || ny >= n || grid[nx][ny] == 0) {
                    continue;
                }
                if (grid[nx][ny] == 1) {  // fresh orange, rotting it
                    -- fresh;
                    grid[nx][ny] = 2;
                    store.push(make_pair(nx, ny));
                }
            }
        }
    }
    return fresh == 0 ? max(0, minutes) : -1;
}
