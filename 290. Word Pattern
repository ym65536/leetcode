bool wordPattern(string pattern, string str) {
    vector<string> words = split(str, ' ');
    map<char, string> table;
    set<string> values;
    if (pattern.size() != words.size()) {
        return false;
    }
    for (auto i = 0; i < pattern.size(); ++ i) {
        auto c = pattern[i];
        auto s = words[i];
        if (!table.count(c) && !values.count(s)) {
            table.insert(make_pair(c, s));
            values.insert(s);
        } else {
            if (table[c] != s) {
                return false;
            }
        }
    }
    return true;
}

vector<string> split(const std::string& str, char delim) {
    vector<string> words;
    stringstream ss;
    ss.str(str);
    string item;
    while (getline(ss, item, delim)) {
        words.push_back(item);
    }
    return std::move(words);
}
