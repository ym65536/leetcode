TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
    return dfs(inorder, 0, inorder.size() - 1, postorder, 0, postorder.size() - 1);
}

TreeNode* dfs(const vector<int>& inorder, int il, int ir, const vector<int>& postorder, int pl, int pr) {
    if (pl > pr) {
        return nullptr;
    }
    int lsize = 0;
    for (; lsize + il <= ir; ++ lsize) {
        if (inorder[lsize + il] == postorder[pr]) {
            break;
        }
    }
    TreeNode* root = new TreeNode(postorder[pr]);
    root->left = dfs(inorder, il, il + lsize - 1, postorder, pl, pl + lsize - 1);
    root->right = dfs(inorder, il + lsize + 1, ir, postorder, pl + lsize, pr - 1);
    return root;
}
