int findKthLargest(vector<int>& nums, int k) {
    int left = 0;
    int right = nums.size() - 1;
    k = nums.size() - (k - 1) - 1;
    while (left <= right) {
        int pos = partition(nums, left, right);
        if (pos == k) {
            return nums[k];
        } else if (pos < k) {
            left = pos + 1;
        } else {
            right = pos - 1;
        }
    }
    return -1;
}
    
int partition(vector<int>& nums, int left, int right) {
    int pivot = left;
    int l = pivot + 1;
    int r = right;
    while (l <= r) {
        while (l <= right && nums[l] <= nums[pivot]) {
            ++ l;
        }
        while (r >= left && nums[r] > nums[pivot]) {
            -- r;
        }
        if (l < r) {
            swap(nums[l], nums[r]);
        }
    };
    swap(nums[pivot], nums[r]);
    pivot = r;
    return pivot;
}
