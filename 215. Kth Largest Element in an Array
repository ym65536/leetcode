int findKthLargest(vector<int>& nums, int k) {
        int left = 0;
        int right = nums.size() - 1;
        k = nums.size() - (k - 1) - 1;
        while (left <= right) {
            int pos = partition(nums, left, right);
            if (pos == k) { 
                return nums[pos];
            } else if (pos > k) {
                right = pos - 1;
            } else {
                left = pos + 1;
            }
        }
    }
    
    int partition(vector<int>& nums, int left, int right) {
        int povit = nums[left];
        int l = left + 1;
        int r = right;
        while (l <= r) {
            while (l <= right && nums[l] <= povit) {
                ++ l;
            }
            while (r >= left && nums[r] > povit) {
                -- r;
            }
            if (l < r) {
                swap(nums[l], nums[r]);
            }
        }
        int middle = r;
        swap(nums[left], nums[middle]);
        return middle;
    }
