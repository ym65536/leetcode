int sumNumbers(TreeNode* root) {
    return rootSum(root, 0);
}

int rootSum(TreeNode* root, int sum) {
    if (root == NULL) {
        return sum;
    }
    if (!root->left && !root->right)  {
        return sum * 10 + root->val;
    }
    return rootSum(root->left, 10 * sum + root->val) + rootSum(root->right, 10 * sum + root->val);
}

int sumNumbers(TreeNode* root) {
    if (root == nullptr) {
        return 0;
    }
    int result = 0;
    queue<pair<TreeNode*, int>> store;
    store.push(make_pair(root, 0));
    while (!store.empty()) {
        auto node = store.front().first;
        auto val = store.front().second;
        store.pop();
        auto next_val = val * 10 + node->val;
        if (!node->left && !node->right) {
            result += next_val;
        }
        if (node->left) {
            store.push(make_pair(node->left, next_val));
        }
        if (node->right) {
            store.push(make_pair(node->right, next_val));
        }
    }

    return result;
    }
