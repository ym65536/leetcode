TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
    return dfs(preorder, 0, preorder.size() - 1, inorder, 0, inorder.size() - 1);
}

TreeNode* dfs(const vector<int>& preorder, int pl, int pr, const vector<int>& inorder, int il, int ir) {
    if (pl > pr) {
        return nullptr;
    }
    int lsize = 0;
    for (; lsize + il <= ir; ++ lsize) {
        if (inorder[lsize + il] == preorder[pl]) {
            break;
        }
    }
    TreeNode* root = new TreeNode(preorder[pl]);
    root->left = dfs(preorder, pl + 1, pl + lsize, inorder, il, il + lsize - 1);
    root->right = dfs(preorder, pl + lsize + 1, pr, inorder, il + lsize + 1, ir);
    return root;
}
