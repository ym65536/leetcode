// non-recursive
int findCircleNum(vector<vector<int>>& M) {
	int result = 0;
	vector<bool> marked(M.size(), false);
	stack<int> store;
	for (int i = 0; i < M.size(); ++i) {
		if (marked[i]) {
			continue;
		}
		store.push(i);
		while (!store.empty()) {
			int k = store.top();
			store.pop();
			marked[k] = true;
			for (int j = 0; j < M.size(); ++ j) {
				if (marked[j]) {
					continue;
				}
				if (M[k][j] == 0) {
					continue;
				}
				store.push(j);
			}
		}
		++ result;

	}
	return result;
}

// recursive
int findCircleNum(vector<vector<int>>& M) {
    int result = 0;
    vector<bool> marked(M.size(), false);
    for (int i = 0; i < M.size(); ++i) {
        if (marked[i]) {
            continue;
        }
        ++ result;
        dfs(M, marked, i);
    }
    return result;
}
void dfs(vector<vector<int>>& M, vector<bool>& marked, int k) {
    marked[k] = true;
    for (int j = 0; j < M.size(); ++ j) {
        if (marked[j]) {
            continue;
        }
        if (M[k][j] == 0) {
            continue;
        }
        dfs(M, marked, j);
    }
}
